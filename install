#!/bin/bash
# install: install revpipe
# author: christopher.r.barry-at-gmaildotcom
# Copyright 2012

cat <<EOF

This is the revpipe installer. This script will guide you through the
process of configuring a reverse ssh tunnel from one location to
another. Typically revpipe will run on your work box (aka server), and
connect to your home box (aka client), allowing you to ssh back to the
server from the client anytime you need to.

There's a few prerequisites to running this script:

1. You'll need to know the client's external ip address, or dns name.

2. You'll need to have already forwarded the ssh port on the client's
   firewall/router to the internal client machine.

3. You must be installing this script on the server machine.

4. You must to be root to install and run revpipe.

EOF

read -p "Have you satisfied the above prerequisites? [YN]: " PREREQS

case ${PREREQS} in
    [Yy]) : ;;
    *)
        echo -e "\naborted."
        exit 1
        ;;
esac

[[ $(id -u) -eq 0 ]] || { echo -e "\noops! you really need to be root"; exit 1; }

echo -e "\nOK, great. Let's get started.\n"
read -p "Enter the client's external IP address or dns name: " CLIENT_ADDRESS

cat <<EOF

What we're doing here is basically punching a hole out through the
server LAN router/firewall and creating an encrypted pipe directly to
the client's machine. This allows the client to get back into the
server through this already in-place pipe, without having to setup any
port-forwarding rules on the server LAN router/firewall, which you may
not have access to, policy may retrict it, or the server may have a
dynamic ip that could change, breaking the forwarding rules. This gets
around all that nicely.

When you ssh back through the pipe to the server from the client, that
connection will also be encrypted. This double encryption can impact
performance. Ssh can use many different ciphers to encrypt the
pipe. Using a more lightweight cipher like arcfour for the pipe can
significanly improve performance without degrading security. Client
ssh sessions to the server will still use your default cipher, which
is typically aes or 3des.

EOF

read -p "Would you like the pipe to use the arcfour family of ciphers? [YN]: " ARCFOUR

case ${ARCFOUR} in
    [Yy]) : ;;
    *) unset ARCFOUR ;;
esac

